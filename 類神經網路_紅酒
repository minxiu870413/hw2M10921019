{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/minxiu870413/hw2M10921019/blob/main/%E9%A1%9E%E7%A5%9E%E7%B6%93%E7%B6%B2%E8%B7%AF_%E7%B4%85%E9%85%92\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J4ZlwjqfPAVj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b2a86c1-f8d2-43b2-9b80-b24fd1b01837"
      },
      "source": [
        "# 下載 file_id 為 \"1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x\" 的檔案，並將它命名為 winequality-red.csv\n",
        "!gdown --id '1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x' --output datasets\n",
        "# 列出目前目錄下所有的檔案\n",
        "!ls"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x\n",
            "To: /content/datasets\n",
            "\r  0% 0.00/85.7k [00:00<?, ?B/s]\r100% 85.7k/85.7k [00:00<00:00, 24.6MB/s]\n",
            "datasets  sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AYWXZHW6RpKZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "006f6e97-ca26-4b46-f157-221c01d3540d"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "import numpy as np\n",
        "df = pd.read_csv('datasets')\n",
        "df.head()\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "1            7.8              0.88         0.00  ...       0.68      9.8        5\n",
              "2            7.8              0.76         0.04  ...       0.65      9.8        5\n",
              "3           11.2              0.28         0.56  ...       0.58      9.8        6\n",
              "4            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8s8NOCkOQVn9"
      },
      "source": [
        "#!ls\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "import keras\n",
        "import keras.utils\n",
        "from keras import utils as np_utils\n",
        "from keras.utils.np_utils import to_categorical\n",
        "y=df['quality']\n",
        "x=df.drop('quality',axis=1)\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split\\\n",
        "(x,y,test_size=0.2)\n",
        "x_train_normalize=x_train/255  #標準化\n",
        "x_test_normalize=x_test/255\n",
        "y_train_onehot = np_utils.to_categorical(y_train)  #one_hot轉換\n",
        "y_test_onehot = np_utils.to_categorical(y_test)\n"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VF3puvMCUDdy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c013a529-23e9-4f15-abff-963cb090fddc"
      },
      "source": [
        "arr=df\n",
        "print(arr.ndim)\n",
        "print(arr.shape)\n",
        "print(arr.dtypes)\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "(1599, 12)\n",
            "fixed acidity           float64\n",
            "volatile acidity        float64\n",
            "citric acid             float64\n",
            "residual sugar          float64\n",
            "chlorides               float64\n",
            "free sulfur dioxide     float64\n",
            "total sulfur dioxide    float64\n",
            "density                 float64\n",
            "pH                      float64\n",
            "sulphates               float64\n",
            "alcohol                 float64\n",
            "quality                   int64\n",
            "dtype: object\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xFpy1TumWY5G",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "outputId": "03509f49-1230-47e0-f32d-f60ed46b1eee"
      },
      "source": [
        "x_train1D=np.asarray(x_train_normalize).astype('float32')\n",
        "x_test1D=np.asarray(x_test_normalize).astype('float32')\n",
        "y_train1D=np.asarray(y_train_onehot).astype('float32')\n",
        "y_test1D=np.asarray(y_test_onehot).astype('float32')\n",
        "array=x_train\n",
        "array"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>285</th>\n",
              "      <td>9.9</td>\n",
              "      <td>0.590</td>\n",
              "      <td>0.07</td>\n",
              "      <td>3.4</td>\n",
              "      <td>0.102</td>\n",
              "      <td>32.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>1.00015</td>\n",
              "      <td>3.31</td>\n",
              "      <td>0.71</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>778</th>\n",
              "      <td>8.3</td>\n",
              "      <td>0.430</td>\n",
              "      <td>0.30</td>\n",
              "      <td>3.4</td>\n",
              "      <td>0.079</td>\n",
              "      <td>7.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99788</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.61</td>\n",
              "      <td>10.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>6.6</td>\n",
              "      <td>0.520</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.069</td>\n",
              "      <td>8.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.40</td>\n",
              "      <td>0.63</td>\n",
              "      <td>9.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1280</th>\n",
              "      <td>7.1</td>\n",
              "      <td>0.460</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.077</td>\n",
              "      <td>28.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99560</td>\n",
              "      <td>3.37</td>\n",
              "      <td>0.64</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>7.3</td>\n",
              "      <td>0.730</td>\n",
              "      <td>0.24</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.108</td>\n",
              "      <td>18.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.99670</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.59</td>\n",
              "      <td>9.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>632</th>\n",
              "      <td>7.6</td>\n",
              "      <td>0.410</td>\n",
              "      <td>0.14</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.087</td>\n",
              "      <td>21.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>0.99640</td>\n",
              "      <td>3.32</td>\n",
              "      <td>0.57</td>\n",
              "      <td>10.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>645</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.640</td>\n",
              "      <td>0.10</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.115</td>\n",
              "      <td>5.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0.99840</td>\n",
              "      <td>3.37</td>\n",
              "      <td>0.69</td>\n",
              "      <td>10.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>677</th>\n",
              "      <td>8.6</td>\n",
              "      <td>0.800</td>\n",
              "      <td>0.11</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.084</td>\n",
              "      <td>12.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0.99790</td>\n",
              "      <td>3.40</td>\n",
              "      <td>0.48</td>\n",
              "      <td>9.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>9.3</td>\n",
              "      <td>0.655</td>\n",
              "      <td>0.26</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.096</td>\n",
              "      <td>5.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0.99738</td>\n",
              "      <td>3.25</td>\n",
              "      <td>0.42</td>\n",
              "      <td>9.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>7.6</td>\n",
              "      <td>0.390</td>\n",
              "      <td>0.31</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.082</td>\n",
              "      <td>23.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>0.99820</td>\n",
              "      <td>3.52</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1279 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  ...    pH  sulphates  alcohol\n",
              "285             9.9             0.590         0.07  ...  3.31       0.71      9.8\n",
              "778             8.3             0.430         0.30  ...  3.36       0.61     10.5\n",
              "51              6.6             0.520         0.04  ...  3.40       0.63      9.4\n",
              "1280            7.1             0.460         0.20  ...  3.37       0.64     10.4\n",
              "587             7.3             0.730         0.24  ...  3.26       0.59      9.3\n",
              "...             ...               ...          ...  ...   ...        ...      ...\n",
              "632             7.6             0.410         0.14  ...  3.32       0.57     10.5\n",
              "645             7.8             0.640         0.10  ...  3.37       0.69     10.1\n",
              "677             8.6             0.800         0.11  ...  3.40       0.48      9.9\n",
              "763             9.3             0.655         0.26  ...  3.25       0.42      9.6\n",
              "21              7.6             0.390         0.31  ...  3.52       0.65      9.7\n",
              "\n",
              "[1279 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nu6HvVYUHn3l"
      },
      "source": [
        "from keras.models import Sequential #在使用前需要先提前導入這個函數\n",
        "model = Sequential()\n",
        "from keras.layers import Dense\n",
        "\"\"\"\n",
        "    建立輸入層和第一層隱蔽層\n",
        "    \n",
        "    參數：\n",
        "        units - 隱蔽層神經元個數\n",
        "        input_dim - 輸入層神經元個數\n",
        "        kernel_initializer - 使用normal distribution正態分佈的隨機數來初始化權重和方差\n",
        "        activation - 定義激活函數\n",
        "\"\"\"\n",
        "model.add(Dense(units = 224,  \n",
        "                input_dim = 11,  \n",
        "                kernel_initializer = 'normal',  \n",
        "                activation = 'relu'))  "
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oxkzMZ67Tcbr"
      },
      "source": [
        "from keras.layers import Dropout\n",
        "model.add(Dropout(0.5)) #隨機消除50%的神經單元"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2VB6AExTTgOq"
      },
      "source": [
        "\"\"\"\n",
        "    建立輸出層\n",
        "    \n",
        "    參數：\n",
        "        units - 輸出層神經元個數\n",
        "        kernel_initializer - 使用normal distribution正態分佈的隨機數來初始化權重和方差\n",
        "        activation - 定義激活函數\n",
        "\"\"\"\n",
        "model.add(Dense(units = 9,\n",
        "                kernel_initializer = 'normal',\n",
        "                activation = 'softmax'))"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CLeccMqETnoa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77956ada-0880-4cdf-81f9-b1fdaa8361f4"
      },
      "source": [
        "print(model.summary())"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 224)               2688      \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 224)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 9)                 2025      \n",
            "=================================================================\n",
            "Total params: 4,713\n",
            "Trainable params: 4,713\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SBZ_8GWJT2_S"
      },
      "source": [
        "\"\"\"\n",
        "    定義訓練方式\n",
        "\n",
        "    參數：\n",
        "        loss - 損失函數： 這裏採用交叉熵的方式\n",
        "        optimizer - 優化器: 使用adam優化器可以讓訓練收斂更快\n",
        "        metrics - 評估模型：設置爲準確率\n",
        "\n",
        "\"\"\"\n",
        "model.compile(loss = 'categorical_crossentropy',  \n",
        "                     optimizer = 'adam', metrics = ['accuracy'])"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P6EWF7T2ULQ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ebf23932-dba7-4503-ea4a-573d25453c65"
      },
      "source": [
        "\"\"\"\n",
        "    開始訓練\n",
        "\n",
        "    參數：\n",
        "        X_train_normalize - feature數字圖像的特徵值\n",
        "        y_train_one_hot - 數字圖像的真實標籤\n",
        "        metrics - 評估模型：設置爲準確率\n",
        "        validation_spli - 訓練與驗證數據比例：80%用作訓練數據，20%用作驗證數據\n",
        "        epochs - 訓練週期\n",
        "        batch_size - 每批次的數據項數\n",
        "        verbose - 顯示訓練過程\n",
        "\"\"\"\n",
        "model.fit(x=x_train1D,y=y_train1D,validation_split=0.2,\n",
        "                          epochs=100,batch_size=2,verbose=1)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "512/512 [==============================] - 1s 2ms/step - loss: 1.3557 - accuracy: 0.4115 - val_loss: 1.2673 - val_accuracy: 0.4336\n",
            "Epoch 2/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1836 - accuracy: 0.4057 - val_loss: 1.2565 - val_accuracy: 0.5078\n",
            "Epoch 3/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1698 - accuracy: 0.4389 - val_loss: 1.2527 - val_accuracy: 0.5078\n",
            "Epoch 4/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1676 - accuracy: 0.4467 - val_loss: 1.2322 - val_accuracy: 0.4805\n",
            "Epoch 5/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1558 - accuracy: 0.4829 - val_loss: 1.2298 - val_accuracy: 0.5234\n",
            "Epoch 6/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1536 - accuracy: 0.4682 - val_loss: 1.2313 - val_accuracy: 0.5195\n",
            "Epoch 7/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1513 - accuracy: 0.4751 - val_loss: 1.2123 - val_accuracy: 0.4844\n",
            "Epoch 8/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1439 - accuracy: 0.4721 - val_loss: 1.2188 - val_accuracy: 0.5039\n",
            "Epoch 9/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1494 - accuracy: 0.4653 - val_loss: 1.2179 - val_accuracy: 0.5156\n",
            "Epoch 10/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1405 - accuracy: 0.4946 - val_loss: 1.2311 - val_accuracy: 0.5117\n",
            "Epoch 11/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1494 - accuracy: 0.4731 - val_loss: 1.2203 - val_accuracy: 0.5195\n",
            "Epoch 12/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1413 - accuracy: 0.4946 - val_loss: 1.2252 - val_accuracy: 0.4766\n",
            "Epoch 13/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1380 - accuracy: 0.4839 - val_loss: 1.2172 - val_accuracy: 0.5234\n",
            "Epoch 14/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1380 - accuracy: 0.4770 - val_loss: 1.2165 - val_accuracy: 0.5156\n",
            "Epoch 15/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1364 - accuracy: 0.4966 - val_loss: 1.2173 - val_accuracy: 0.5039\n",
            "Epoch 16/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1347 - accuracy: 0.4927 - val_loss: 1.2184 - val_accuracy: 0.5234\n",
            "Epoch 17/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1334 - accuracy: 0.5044 - val_loss: 1.2066 - val_accuracy: 0.5156\n",
            "Epoch 18/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1356 - accuracy: 0.4936 - val_loss: 1.2135 - val_accuracy: 0.5273\n",
            "Epoch 19/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1341 - accuracy: 0.4966 - val_loss: 1.2287 - val_accuracy: 0.5156\n",
            "Epoch 20/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1420 - accuracy: 0.4888 - val_loss: 1.2136 - val_accuracy: 0.5234\n",
            "Epoch 21/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1329 - accuracy: 0.5015 - val_loss: 1.2053 - val_accuracy: 0.5195\n",
            "Epoch 22/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1358 - accuracy: 0.5093 - val_loss: 1.2052 - val_accuracy: 0.5234\n",
            "Epoch 23/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1306 - accuracy: 0.5024 - val_loss: 1.2103 - val_accuracy: 0.5273\n",
            "Epoch 24/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1306 - accuracy: 0.4829 - val_loss: 1.2121 - val_accuracy: 0.5312\n",
            "Epoch 25/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1303 - accuracy: 0.5015 - val_loss: 1.2125 - val_accuracy: 0.5195\n",
            "Epoch 26/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1306 - accuracy: 0.5161 - val_loss: 1.2125 - val_accuracy: 0.5117\n",
            "Epoch 27/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1240 - accuracy: 0.5112 - val_loss: 1.2089 - val_accuracy: 0.5312\n",
            "Epoch 28/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1171 - accuracy: 0.5034 - val_loss: 1.2056 - val_accuracy: 0.5312\n",
            "Epoch 29/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1290 - accuracy: 0.5034 - val_loss: 1.1988 - val_accuracy: 0.5273\n",
            "Epoch 30/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1309 - accuracy: 0.4985 - val_loss: 1.2076 - val_accuracy: 0.5312\n",
            "Epoch 31/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1244 - accuracy: 0.5064 - val_loss: 1.2085 - val_accuracy: 0.5078\n",
            "Epoch 32/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1256 - accuracy: 0.5054 - val_loss: 1.1976 - val_accuracy: 0.5312\n",
            "Epoch 33/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1284 - accuracy: 0.5015 - val_loss: 1.1951 - val_accuracy: 0.5352\n",
            "Epoch 34/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1221 - accuracy: 0.4917 - val_loss: 1.2058 - val_accuracy: 0.5273\n",
            "Epoch 35/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1169 - accuracy: 0.4976 - val_loss: 1.2100 - val_accuracy: 0.5352\n",
            "Epoch 36/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1191 - accuracy: 0.4927 - val_loss: 1.2060 - val_accuracy: 0.5273\n",
            "Epoch 37/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1148 - accuracy: 0.5083 - val_loss: 1.2009 - val_accuracy: 0.5156\n",
            "Epoch 38/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1148 - accuracy: 0.5093 - val_loss: 1.2064 - val_accuracy: 0.5391\n",
            "Epoch 39/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1156 - accuracy: 0.5103 - val_loss: 1.1968 - val_accuracy: 0.5312\n",
            "Epoch 40/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1129 - accuracy: 0.5132 - val_loss: 1.1952 - val_accuracy: 0.5391\n",
            "Epoch 41/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1179 - accuracy: 0.5024 - val_loss: 1.1984 - val_accuracy: 0.5273\n",
            "Epoch 42/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1071 - accuracy: 0.5142 - val_loss: 1.1934 - val_accuracy: 0.5273\n",
            "Epoch 43/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1080 - accuracy: 0.5112 - val_loss: 1.1959 - val_accuracy: 0.5273\n",
            "Epoch 44/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1029 - accuracy: 0.5132 - val_loss: 1.1862 - val_accuracy: 0.5352\n",
            "Epoch 45/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1043 - accuracy: 0.5249 - val_loss: 1.2055 - val_accuracy: 0.5352\n",
            "Epoch 46/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1054 - accuracy: 0.5181 - val_loss: 1.1833 - val_accuracy: 0.5273\n",
            "Epoch 47/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1116 - accuracy: 0.5161 - val_loss: 1.1805 - val_accuracy: 0.5469\n",
            "Epoch 48/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1070 - accuracy: 0.4976 - val_loss: 1.1855 - val_accuracy: 0.5508\n",
            "Epoch 49/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0978 - accuracy: 0.5161 - val_loss: 1.1782 - val_accuracy: 0.5469\n",
            "Epoch 50/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0968 - accuracy: 0.5142 - val_loss: 1.1830 - val_accuracy: 0.5352\n",
            "Epoch 51/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1025 - accuracy: 0.5093 - val_loss: 1.1817 - val_accuracy: 0.5508\n",
            "Epoch 52/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0901 - accuracy: 0.5073 - val_loss: 1.1711 - val_accuracy: 0.5508\n",
            "Epoch 53/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0996 - accuracy: 0.5005 - val_loss: 1.1830 - val_accuracy: 0.5430\n",
            "Epoch 54/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0942 - accuracy: 0.5142 - val_loss: 1.1767 - val_accuracy: 0.5391\n",
            "Epoch 55/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0831 - accuracy: 0.5327 - val_loss: 1.1806 - val_accuracy: 0.5391\n",
            "Epoch 56/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0875 - accuracy: 0.5239 - val_loss: 1.1750 - val_accuracy: 0.5312\n",
            "Epoch 57/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0944 - accuracy: 0.5122 - val_loss: 1.1698 - val_accuracy: 0.5430\n",
            "Epoch 58/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0979 - accuracy: 0.5132 - val_loss: 1.1782 - val_accuracy: 0.5430\n",
            "Epoch 59/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0839 - accuracy: 0.5103 - val_loss: 1.1685 - val_accuracy: 0.5547\n",
            "Epoch 60/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0891 - accuracy: 0.5171 - val_loss: 1.1643 - val_accuracy: 0.5430\n",
            "Epoch 61/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0775 - accuracy: 0.5200 - val_loss: 1.1674 - val_accuracy: 0.5352\n",
            "Epoch 62/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0801 - accuracy: 0.5435 - val_loss: 1.1611 - val_accuracy: 0.5625\n",
            "Epoch 63/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0796 - accuracy: 0.5181 - val_loss: 1.1575 - val_accuracy: 0.5586\n",
            "Epoch 64/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0800 - accuracy: 0.5298 - val_loss: 1.1632 - val_accuracy: 0.5625\n",
            "Epoch 65/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0743 - accuracy: 0.5259 - val_loss: 1.1555 - val_accuracy: 0.5625\n",
            "Epoch 66/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0831 - accuracy: 0.5181 - val_loss: 1.1586 - val_accuracy: 0.5508\n",
            "Epoch 67/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0807 - accuracy: 0.5396 - val_loss: 1.1652 - val_accuracy: 0.5586\n",
            "Epoch 68/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0673 - accuracy: 0.5386 - val_loss: 1.1513 - val_accuracy: 0.5547\n",
            "Epoch 69/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0749 - accuracy: 0.5288 - val_loss: 1.1524 - val_accuracy: 0.5703\n",
            "Epoch 70/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0777 - accuracy: 0.5191 - val_loss: 1.1493 - val_accuracy: 0.5703\n",
            "Epoch 71/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0678 - accuracy: 0.5318 - val_loss: 1.1557 - val_accuracy: 0.5703\n",
            "Epoch 72/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0638 - accuracy: 0.5376 - val_loss: 1.1442 - val_accuracy: 0.5625\n",
            "Epoch 73/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0679 - accuracy: 0.5269 - val_loss: 1.1408 - val_accuracy: 0.5703\n",
            "Epoch 74/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0684 - accuracy: 0.5298 - val_loss: 1.1374 - val_accuracy: 0.5625\n",
            "Epoch 75/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0631 - accuracy: 0.5425 - val_loss: 1.1359 - val_accuracy: 0.5703\n",
            "Epoch 76/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0522 - accuracy: 0.5425 - val_loss: 1.1360 - val_accuracy: 0.5586\n",
            "Epoch 77/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0550 - accuracy: 0.5239 - val_loss: 1.1365 - val_accuracy: 0.5625\n",
            "Epoch 78/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0565 - accuracy: 0.5533 - val_loss: 1.1404 - val_accuracy: 0.5508\n",
            "Epoch 79/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0618 - accuracy: 0.5249 - val_loss: 1.1269 - val_accuracy: 0.5781\n",
            "Epoch 80/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0511 - accuracy: 0.5337 - val_loss: 1.1323 - val_accuracy: 0.5703\n",
            "Epoch 81/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0485 - accuracy: 0.5415 - val_loss: 1.1270 - val_accuracy: 0.5938\n",
            "Epoch 82/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0576 - accuracy: 0.5347 - val_loss: 1.1300 - val_accuracy: 0.5898\n",
            "Epoch 83/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0484 - accuracy: 0.5552 - val_loss: 1.1244 - val_accuracy: 0.5742\n",
            "Epoch 84/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0359 - accuracy: 0.5562 - val_loss: 1.1242 - val_accuracy: 0.5664\n",
            "Epoch 85/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0521 - accuracy: 0.5357 - val_loss: 1.1482 - val_accuracy: 0.5352\n",
            "Epoch 86/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0468 - accuracy: 0.5464 - val_loss: 1.1492 - val_accuracy: 0.5391\n",
            "Epoch 87/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0420 - accuracy: 0.5503 - val_loss: 1.1149 - val_accuracy: 0.5742\n",
            "Epoch 88/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0368 - accuracy: 0.5503 - val_loss: 1.1168 - val_accuracy: 0.6055\n",
            "Epoch 89/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0352 - accuracy: 0.5425 - val_loss: 1.1133 - val_accuracy: 0.5742\n",
            "Epoch 90/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0447 - accuracy: 0.5484 - val_loss: 1.1095 - val_accuracy: 0.6016\n",
            "Epoch 91/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0423 - accuracy: 0.5357 - val_loss: 1.1063 - val_accuracy: 0.5977\n",
            "Epoch 92/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0312 - accuracy: 0.5562 - val_loss: 1.1126 - val_accuracy: 0.5859\n",
            "Epoch 93/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0367 - accuracy: 0.5503 - val_loss: 1.1061 - val_accuracy: 0.5742\n",
            "Epoch 94/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0376 - accuracy: 0.5406 - val_loss: 1.0965 - val_accuracy: 0.5977\n",
            "Epoch 95/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0315 - accuracy: 0.5591 - val_loss: 1.1001 - val_accuracy: 0.5938\n",
            "Epoch 96/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0264 - accuracy: 0.5396 - val_loss: 1.1007 - val_accuracy: 0.5781\n",
            "Epoch 97/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0318 - accuracy: 0.5367 - val_loss: 1.0962 - val_accuracy: 0.5938\n",
            "Epoch 98/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0200 - accuracy: 0.5533 - val_loss: 1.0967 - val_accuracy: 0.5898\n",
            "Epoch 99/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0347 - accuracy: 0.5660 - val_loss: 1.0931 - val_accuracy: 0.5938\n",
            "Epoch 100/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0270 - accuracy: 0.5630 - val_loss: 1.0974 - val_accuracy: 0.5859\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f0abb6aa550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A38UpXEDWAo8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df149378-4c9c-42f7-8ebd-03b96085f08b"
      },
      "source": [
        "# 評估模型的準確率\n",
        "scores = model.evaluate(x_test1D, y_test1D)\n",
        "print()\n",
        "print('accuracy=',scores[1])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10/10 [==============================] - 0s 1ms/step - loss: 1.0158 - accuracy: 0.5625\n",
            "\n",
            "accuracy= 0.5625\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGhTyuEb5OG8"
      },
      "source": [
        "y_predict = model.predict(x_test1D)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GH8pXEQd5PLj",
        "outputId": "5b3919b2-51c0-4471-862d-e14d9bc05050"
      },
      "source": [
        "from sklearn import metrics\n",
        "\n",
        "metrics.mean_squared_error(y_test1D,y_predict)\n",
        "print('RMSE：', np.sqrt(metrics.mean_squared_error(y_test1D,y_predict)))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RMSE： 0.24831556\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VgoFDVCuLS3R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aff903be-7951-488b-bce7-f116e2d171b7"
      },
      "source": [
        "def mape(y_test, y_predict):\n",
        "    return np.mean(np.abs((y_predict - y_test1D) / (y_test1D +1))) * 100\n",
        "print('MAPE:',mape(y_test1D, y_predict))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MAPE: 9.384164959192276\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}